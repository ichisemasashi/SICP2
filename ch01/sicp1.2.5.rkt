;
; SICP 1.2.5 最大公約数
; 2 つの整数 a と b の 最大公約数 は a と b の両方をぴったり割り切れる最大の整数と定義されます
; 2 つの整数の gcd を求める方法のひとつ: それらを素因数分解して共通の素因数を探す
; もうひとつ：r が a を b で割った余りであれば、a と b の公約数は b と r の公約数とまさに同じものになる(ユークリッドの互除法 (Euclid’s Algorithm))
; example:GCD(206,40) = GCD(40,6)
;                     = GCD(6,4)
;                     = GCD(4,2)
;                     = GCD(2,0)
;                     = 2

(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
; ↑ 反復プロセスを生成し、ステップ数は計算する数値に対して対数的に増加


;;;;;;;;;;;;
; Lamé の定理:
; ユークリッドの互除法によって、ある数値ペアのgcd を計算するのに k ステップを必要とする場合、ペアの小さいほうの数値は k 番目のフィボナッチ数以上である。
;;;;;

; この定理を使って、ユークリッドの互除法の増加オーダーを得ることができます
; 手続きの n を二つの入力のうちの小さいほうだとします。プロセスがk ステップかかるとすると、n ≥ Fib(k) ≈ φ^ k /√5 が必ず成り立ちます。したがって、ステップ数 k は n に対して (φ を底とする) 対数的に増加します。つまり、増加オーダーは Θ(log n) となります。

