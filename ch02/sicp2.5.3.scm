;; SICP 2.5.3 例: 記号代数

;;記号代数式の操作は複雑な処理です。それについて検討することで、大規模システムの設計の際に起こる
;;多くの困難な問題について知ることができます。
;;代数式は一般に、木構造の演算子を被演算子に適用する階層構造と見なすことができます。
;;代数式を構築するには、定数や変数のような基本オブジェクトから始めて、
;;それらを加算や乗算のような代数演算子によって組み合わせます。
;;ほかの言語の場合と同じように、複合オブジェクトを簡単に参照できるように抽象化を行います。
;;記号代数での典型的な抽象化としては、線形結合、多項式、有理関数、三角関数などの考え方があります。
;;これらは複合 “型” と見なすことができ、そうすることで式の処理を指示することがやりやすくなります。
;;例えば、次の式は、
;; $$ x^2 \sin (y^2 + 1) + x \cos 2y + \cos (y^3 - 2y^2) $$
;;整数を係数とする y の多項式の三角関数を係数とする x の多項式として記述することができます。

;;ここでは完全な代数処理システムを開発しようとしているわけではありません。
;;そのようなシステムは、深い代数の知識と洗練されたアルゴリズムを具現化した、
;;非常に複雑なプログラムになります。
;;ここでは、代数操作の単純でありながら重要な部分である多項式の算術演算について見ていきます。
;;また、そのようなシステムを設計する際にどのような決定をしなければいけないかということと、
;;その取り組みに抽象データとジェネリック演算という考え方を適用する方法について説明します。

;;;;;;;;;;
;; 多項式の算術演算

;;多項式の数値演算を行うシステムを設計するにあたっての最初の仕事は、多項式とは何なのかを決めることです。
;;多項式は通常、いくつかの変数 (多項式の不 定元 (indeterminate)) に関して定義されます。
;;簡単にするために、ここではひとつしか不定元を持たない多項式 (一元多項式 (univariate polynomial)) に
;;限定することにします。多項式は項の和として定義し、その項は係数か、不定元の冪乗か、
;;係数と不定元の冪乗の積であるとします。係数は、多項式の不定元と独立な代数式と定義します。
;;例えば、
;; $$ 5x^2 + 3x + 7 $$
;;は単純な x の多項式で、
;; $$ (y^2 + 1)x^3 + (2y)x + 1 $$
;;は係数が y の多項式である x の多項式です。
;;ここまでで、もういくつかの厄介な問題を避けて通ってきています。上の一番目の多項式は、
;;多項式 5y2 + 3y + 7 と同じものでしょうか、それとも異なるものでしょうか。
;;妥当な答えは、“多項式を純粋に数学の関数であると考えれば、同じものである。
;;しかし、多項式を構文形式であると考えれば、異なるものである” となるでしょう。
;;また、二番目の多項式は、x の多項式を係数とする y の多項式と代数学的に等価です。
;;私たちのシステムはこのことを認識するべきでしょうか。
;;しかも、多項式を表現する方法はほかにもあります—例えば、因数の積、(一元多項式の場合) 根の集合、
;;特定の点の集合における多項式の値のリストなどによって表すこともできます.
;;この代数操作システムでは、“多項式” というのは特定の構文形式であって、
;;その奥にある数学的意味ではないと決めることで、これらの問題を解決できます。
;;次に、多項式の算術演算をどのようなものにするか考える必要があります。
;;この単純なシステムでは、加算と乗算だけ考えることにします。さらに、組み合わせる二つの多項式は
;;同じ不定元を持っていなければならないということにします。

;;このシステムの設計にあたっては、おなじみのデータ抽象化の規律に従います。
;;多項式はpoly というデータ構造を使って表現し、poly はひとつの変数と項の集まりからなります。poly からそれらの部品を抽出するセレクタ variable, term-list と、与えられた変数と項のリストから poly を組み立てるコンストラクタ make-poly があると想定します。変数はただの記号なので、変数の比較には 2.3.2 節の same-variable? 手続きが使えます。以下の手続きは、poly の加算と乗算を定義するものです。
