; SICP 2.4 抽象データの多重表現

;ここまで、データ抽象化というものを紹介してきました。これはシステムを構築するための方法論で、
;プログラムの操作対象となるデータオブジェクトに対してどのような実装を選ぶかということと独立に、
;プログラムのほとんどの部分を記述できるようにするというものでした。
;例えば2.1.1 節では、有理数を使うプログラムを設計するというタスクを、複合データを構築するために
;コンピュータ言語が持っている基本メカニズムによって有理数を実装するというタスクから
;切り離すやり方について見てきました。
;ポイントとなる考え方は、抽象化の壁---この場合は、有理数のセレクタとコンストラクタ (make-rat, numer,denom)—を建てて、
;有理数をどう使うかというところと、有理数のリスト構造による表現という内部の構造とを分離するということでした。

;これらのデータ抽象化の壁は、複雑性をコントロールする強力な道具です。
;データオブジェクトの内部表現を分離することで、大きなプログラムの設計というタスクを、
;別々に行うことのできる小さなタスクの集まりに分割できます。しかし、この手のデータ抽象化はまだ十分に強力とは言えません。
;というのは、データ構造の “内部表現” というものがいつも意味があるとは限らないからです。

;一つ目には、データオブジェクトの便利な表現方法が二つ以上あって、複数の表現を扱えるようなシステムを
;設計したいという場合があります。単純な例について考えると、複素数は二種類のほぼ等価な方法、
;直交形式 (実部と虚部) と極形式 (絶対値と偏角) によって表すことができます。
;直交形式のほうが適切な場合もあれば、極形式のほうが適切な場合もあります。
;実際に、複素数が両方の形式で表され、複素数を操作する手続きはどちらか一方の表現を扱う
;といったシステムも、十分に考えられます。

;さらに重要なことは、プログラミングシステムは仕様変更を繰り返しながら⻑期間にわたって
;多くの人々によって設計されるということがよくあるということです。そのような環境では、
;データ表現として何を選ぶかについてみんなが前もって合意するということはまずありません。
;つまり、データの表現をそれを使うところから分離するデータ抽象化の壁に加えて、複数のデータ表現
;をそれぞれ分離し、ひとつのプラットフォーム上でそれらを共存させる抽象化の壁が必要だということです。
;また、大きなプログラムというものは、別々に設計されたすでに存在するモジュールを組み合わせて作られることが多いので、
;プログラマがモジュールを加法的 (additively) に、つまり、これらのモジュールを設計し直したり
;実装し直したりすることなく、より大きなシステムに組み込んでいくための規約が必要になります。

;この節では、プログラムの部品によって違う方法で表現されるデータを扱うやり方について学びます。
;そのためには、ジェネリック手続き (generic procedure)--- 二種類以上の方法で表現されるデータを扱える手続き---
;を構築する必要があります。ジェネリック手続きを構築するためにここで使う主なテクニックは、
;タイプタグ (type tag) を持つデータオブジェクト、つまりどのように処理されるべきかという情報を明示的に持っている
;データオブジェクトを使うということです。また、データ主導 (data-directed) プログラミングについても検討します。
;これは、ジェネリック演算によって加法的にシステムを組み立てていくための強力で便利な実装戦略です。

;最初に、単純な複素数の例を扱います。タイプタグとデータ主導スタイルを使うことで、
;“複素数” データオブジェクトという抽象概念を維持したまま、
;複素数の表現として直交形式と極形式を別々に設計できるということを見ていきます。
;これは、複素数がどのように表現されているかということと独立に複素数の各部分にアクセスする
;ジェネリックセレクタによって複素数の算術演算(add-complex, sub-complex, mul-complex, div-complex) を定義することで
;達成できます。これによってできる複素数システムでは、図 2.19に示すように、二種類の
;異なる抽象化の壁を持つことになります。“水平な” 抽象化の壁は、図2.1に出てきたものと同じ役割を果たします。
;それらは、“高レベル” 演算を “低レベル” 演算から分離するものです。それに加えて、複数の表現を別々に設計して
;組み込めるようにするための “垂直な” 壁があります。

;   複素数を使うプログラム
;--[add-complex, sub-complex, mul-complex, div-complex]--
;   複素数算術演算パッケージ
;--------------------------------------------------------
;   直交形式による表現        |   極形式による表現
;--------------------------------------------------------
;   リスト構造とマシンの基本算術演算
;
;  図 2.19: 複素数システムのデータ抽象化の壁

;2.5 節では、タイプタグとデータ主導スタイルを使ってジェネリック算術演算パッケージを開発するやり方を示します。
;このシステムは、すべての種類の “数値” を操作するのに使える手続き (add, mul など) を提供し、新たな種類
;の数値が必要になったら簡単に拡張できるようになっています。2.5.3 節では、記号代数を実行するシステムの中で
;ジェネリック数値演算を使う方法を示します。
