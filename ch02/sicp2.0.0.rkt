; SICP 2 データを用いた抽象化の構築

; 第 1 章では、計算プロセスと、プログラム設計における手続きの役割に焦点を 合わせました。
; この章では、さらに複雑なデータについて見ていきます。
;第一章での焦点が手続きを組み合わせて複合手続きを作ることによって
;抽象化を構築することであったのに対して、この章では、もうひとつの重要な側面に目を向けます。
;データオブジェクトを組み合わせて 複合データ (compound data) を作るためにプログラミング言語が提供する手段です。
;なぜプログラミング言語に複合データが必要なのでしょうか。
;その理由は、 複合手続きが必要である理由と同じです。
;プログラムを設計する概念レベルを 引き上げ、設計のモジュール性を高め、言語の表現力を強くしたいからです。
;例えば、二つの有理数を取って和を返す add-rat という演 算を考えることができます。
;単純なデータを使うと、有理数は分母と分子とい う二つの整数として考えられます。
;そのため、有理数が二つの整数 (分母と分子) として表され、add-rat が二つの手続き
;(ひとつは和の分子を返し、もうひ とつは分母を返す) として実装されるように
;プログラムを設計できます。しかし、これは不格好です。
;こうすると、どの分子がどの分母に対応するのか明示的 に記録しておかないといけないからです。
;分母と分子を “くっつけて”、ペア—複合データオブジェクト (compound data object)—にできれば、
;状況はずっとよくなります。そうすると、有理数を ひとつの概念単位として捉えるという考え方に
;近いやり方でプログラムから扱 うことができます。
;複合データを使うと、プログラムのモジュール性を上げることもできます。
;有理数を一人前のオブジェクトとして直接操作できれば、プログラムの中で
;有理数を有理数として扱う部分を、有理数を例えば整数のペアとしてどうやって表すかといった細部から分離できます。
;プログラムの中のデータオブジェクトをどうやって表すかを扱う部分と、
;データオブジェクトをどうやって使う かを扱う部分とを分離するという汎用的なテクニックは、
;データ抽象化 (data abstraction) と呼ばれる強力な設計手法です。

;線形結合”ax + by を作ることを考えてみましょう。書き方はいろいろ考えられますが、
;例えば a, b, x, y を引数として取り、ax + by の値を返す手続きを書くとします。
;引数が数値であれば、何も難しいことはあ りません。すぐに次のような手続きを定義できます。
(define (linear-combination a b x y)
  (+ (* a x) (* b y)))
;しかし、扱いたいものが数値だけでないとするとどうでしょう。
;加算と乗算さえ定義されていれば、有理数でも複素数でも多項式でも何でも
;線形結合が作れるという考え方を、手続きという形で表現したいという場合について考えてみます。
(define (linear-combination a b x y)
  (add (mul a x) (mul b y)))
;ここでのポイントは、linear-combination が a, b, x, y について、手続き add と mul が
;それらに対して適切な演算を行ってくれるはずだということだけ知っていればいいというところです。
;この章は、上で述べた有理数計算システムの実装から始めます。
;これによって、複合データやデータ抽象化について考察する基礎ができます。
;複合手続きの場合と同じように、対象とする主な問題は、複雑性をうまく扱うテクニッ クとしての抽象化です。
;ここでは、データ抽象化によって、プログラムの部品間に適切な
;抽象化の壁 (abstraction barrier) を建てられるようになるということを見ていきます。
;複合データを形成するうえで鍵となるのは、データオブジェクトを組み合わせて複雑なデータオブジェクトを
;形成できるように、プログラミング言語が ある種の “糊” を提供しなければいけないということです。
;複合データを扱ううえで鍵となる考え方のひとつは、クロージャ (closure) という概念です。
;これは、私たちがデータオブジェクトを組み合わせるのに使う糊は、基本データオブジェクトだけでなく、
;複合データオブジ ェクトも組み合わせられるようになっていなければいけないということです。
;もうひとつの鍵となる考え方は、部品を組み立てるようにプログラムのモジュ ールを組み立てるうえで、
;複合データが標準インターフェイス (conventional interface) として使えるということです。
