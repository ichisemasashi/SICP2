; SICP 2.3.3 例: 集合を表現する
;集合の表現ということになると、表現をどう決めるかということはあまり明らかではありません。
;実際に、可能な表現は数多くあり、それぞれいくつかの点でお互いに大きく異なっています。
;ざっくりした言い方をすると、集合とはただの異なるオブジェクトの集まりです。
;より正確な定義をするには、データ抽象化の手法を使うことができます。
;つまり、集合に使われる演算を規定することによって “集合” を定義するということです。
;それらの演算は、union-set, intersection-set, element-of-set?, adjoin-set です。
;element-of-set? は、与えられた要素が集合の構成要素であるかどうかを判定する述語です。
;adjoin-set は、オブジェクトと集合を引数に取り、元の集合の要素に加えて追加された要素を含む集合を返します。
;union-set は、二つの集合の和集合、つまりどちらかの引数に含まれる要素をすべて含む集合を計算します。
;intersection-set は、二つの集合の共通部分、つまり引数のどちらにも含まれる要素のみを含む集合を計算します。
;データ抽象という視点から見ると、上の解釈と整合性があるものでさえあれば、
;これらの演算を実装するのにどのような表現でも自由に設計できます。

;;;;;;;;;;
; 順序なしリストとしての集合
;集合を表現するやり方のひとつは、要素が二回以上現れることがないリストというものです。
;空集合は空リストとして表現します。
;この表現では、element-of-set? は 2.3.1 節の memq 手続きと似たものになります。
;ここでは eq? ではなく equal? を使っているため、集合の要素は記号である必要はありません。
(define (element-of-set? x set)
  (cond ((null? set) false)
         ((equal? x (car set)) true)
         (else (element-of-set? x  (cdr set)))))
;これを使って、adjoin-set を書くことができます。
;追加するオブジェクトがすでに集合の中にあるなら、単にその集合を返します。
;そうでなければ、cons を使ってそのオブジェクトを集合を表すリストに追加します。
(define (adjoin-set x set)
  (if (element-of-set? x set) set
     (cons x set)))
;intersection-set には、再帰的な戦略が使えます。
;もし、 set2 と、 set1 の cdrとの共通部分を作ることができるなら、
;set1 の car をそれに含めるかどうかを決めるだけで十分です。
;しかし、これは (car set1) が set2 にも含まれているかどうかによって決まります。
(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
         ((element-of-set? (car set1) set2)
          (cons (car set1) (intersection-set (cdr set1) set2)))
         (else (intersection-set (cdr set1) set2))))
;表現を設計する際に考慮するべき問題のひとつは効率です。この集合演算に必要となるステップ数を考えてみましょう。
;どの演算も element-of-set? を使っているので、この演算の速度は集合の実装全体の効率に大きな影響を与えます。
;ここで、あるオブジェクトが集合の要素かどうかチェックするために、element-of-set? は集合全体を走査する必要があるかもしれません
;(最悪の場合、オブジェクトは集合の中になかったという結果になります)。
;そのため、集合が n 個の要素を持っているとすると、element-of-set? には最大 n ステップかかるかもしれません。
;つまり、必要なステップ数は Θ(n) で増加するということです。
;adjoin-set はこの演算を使うので、やはり Θ(n) で増加します。
;intersection-set は、set1 の要素それぞれに対して element-of-set? のチェックをするため、
;必要なステップ数は関係する集合の大きさの積に比例して増加、つまり大きさ n の二つの集合に対して
;Θ(n^2 ) で増加するということになります。