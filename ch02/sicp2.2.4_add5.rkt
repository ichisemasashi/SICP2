; SICP 2.2.4 add5 例: 図形言語/頑健な設計のための言語レベル
;基本的なデータ抽象化であるペインタは手続きによる表現を使って実装され、
;異なる基礎的な描画機能を言語が統一したやり方で扱うことができるようにしています。
;結合手段は閉包性を満たしているため、複雑な設計も簡単に組み立てることができます。
;これで、手続きを抽象化するためのツールがすべて、ペインタの結合手段を抽象化するのに利用できるということになります。

;階層化設計 (stratified design)
;複雑なシステムは一連の言語によって記述される一連のレベルとして構造化されるべきだという概念
;それぞれのレベルは、そのレベルで基本とされる部品を組み合わせて構築され、
;それぞれのレベルで構築された部品は次のレベルで基本部品として使われます。
;階層化設計のそれぞれのレベルで使われる言語は、その詳細さのレベルに合った基本要素、結合手段、抽象化の手段を備えています。

;階層化のごく小さな例として、ここでの図形言語は基本要素 (基本ペインタ) を使っていますが、
;それらの基本要素は、segments->painter の線分のリストや
;rogers のようなペインタの濃淡の詳細点や線を規定する言語を使って作られたものです。
;図形言語についての説明の大半は、これらの基本要素を組み合わせることや、
;beside や below のような幾何学的な結合器に焦点を当てていました。
;さらに、beside や below を言語の基本要素と見なすことで、さらに高いレベルでの作業も行いました。
;その言語の square-of-four のような演算は、幾何学的な結合器を組み合わせる際のよくあるパターンを捉えています。

;階層化設計は、頑健 (robust) なプログラムを作りやすくします。
;頑健というのは、仕様の小さな変更が、プログラム上でも相応に小さな変更ですむということです。
;例えば、図 2.9に示した、wave をもとにした画像を変更したいとします。
;このとき、最も下のレベルに手を加え、wave の細かい見た目を変えることもできます。
;また、中間レベルで、corner-split が wave を複製するやり方を変えることもできます。
;最も上のレベルで、square-limit が四隅の画像を配置するやり方を変えることもできます。
;一般的に、階層化設計のそれぞれのレベルは、システムの特性を表現するうえでの異なる語彙を提供し、
;システムを変更するための異なる能力を提供します。