;; SICP 2.5 ジェネリック演算によるシステム

;;前の節では、データオブジェクトの表現が二通り以上あるシステムの設計方法について見てきました。
;;ポイントとなる考え方は、ジェネリックインターフェイスという手段によって、データ演算を指定するコードを
;;いくつかの表現に結びつけるというものでした。
;;ここでは、同じ考え方を使って、いろいろな表現に対してジェネリックな演算を定義するだけでなく、
;;いろいろな種類の引数に対してジェネリックな演算を定義するやり方について見ていきます。
;;ここまで、いくつもの算術演算パッケージに触れてきました。言語組み込みの基本算術演算 (+, -, *, /)、
;;2.1.1 節の有理数演算 (add-rat, sub-rat, mul-rat, div-rat)、 それに2.4.3 節で実装した複素数演算があります。
;;今度はデータ主導テクニックを使い、これまでに構築してきたすべての算術演算パッケージを合併した
;;算術演算パッケージを構築します。

;;図 2.23は、これから構築するシステムの構造を示しています。抽象化の壁に注目してください。
;;“数値” を使う人の視点からは、どんな種類の数が与えられても演算を行う add というたったひとつの手続きだけが見えています。
;;add はジェネリックインターフェイスの一部で、別々になっている通常の算術演算、 有理数の算術演算、複素数の算術演算の
;;パッケージに、数値を使うプログラムから統一的なアクセスができるようにします。
;;個々の算術演算パッケージ (例えば複素数パッケージ) は、それ自身、異なる表現 (例えば直交形式と極形式) のために設計された
;;複数のパッケージを連結するジェネリック手続き (例えば add-complex) によってアクセスするようになっていることもあります。
;;また、システムの構造は加法的なので、それぞれの算術演算パッケージは別々に設計して組み合わせて
;;ジェネリック算術演算システムを作れるようになっています。
