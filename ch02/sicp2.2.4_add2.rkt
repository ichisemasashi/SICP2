; SICP 2.2.4 add1 例: 図形言語/枠
;枠は三つのベクトルとして記述できます--- 原点ベクトルと、二つの辺ベクトルです。
;原点ベクトルは、平面上のどこかにある絶対原点からの枠の原点の相対位置を指定します。
;二つの辺ベクトルは、枠の原点を起点として、枠の二つの角の相対位置を指定します。
;もし二つの辺が垂直であれば、枠は⻑方形になります。そうでない場合、枠はより一般的な平行四辺形になります。
;データ抽象化の原則通り、枠がどのように表現されているかについてここではまだ特定する必要がありません。
;三つのベクトルを引数に取り枠を作るコンストラクタmake-frame と、
;それに対応する三つのセレクタ origin-frame, edge1-frame,edge2-frame があるというだけで十分です
;画像は、単位正方形内の座標 (0 ≤ x, y ≤ 1) を使って記述することにします。
;それぞれの枠には枠座標マップ (frame coordinate map) というものを関連づけ、
;画像が枠に合うようにずらしたり拡大縮小したりするのに使います。
;ベクトル v = (x, y) を次のようなベクトルの和にマップすることによって単位正方形を枠内に変換します。
;  Origin(Frame) + x · Edge 1 (Frame) + y · Edge 2 (Frame).
;例えば、(0, 0) は枠の原点に、(1, 1) は原点と対角線上にある頂点に、(0.5, 0.5)は枠の中心にマップされます。
;枠座標マップを作る手続き
(define (frame-coord-map frame)
  (lambda (v)
    (add-vect
     (origin-frame frame)
     (add-vect (scale-vect (xcor-vect v) (edge1-frame frame))
                 (scale-vect (ycor-vect v) (edge2-frame frame))))))
;frame-coord-map をある枠に適用すると、ベクトルが与えられるとベクトルを返す手続きを返します。
;引数ベクトルが単位正方形内にあれば、返り値のベクトルは枠内のものになります。
;例えば、次の式は
;((frame-coord-map a-frame) (make-vect 0 0))
;以下と同じベクトルを返します。
;(origin-frame a-frame)
