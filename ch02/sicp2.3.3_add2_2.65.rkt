; 練習問題 2.65
; 練習問題 2.63と練習問題 2.64の結果を使って、(バランスの取れた) 二分木として実装された集合に対する
; union-set と intersection-set を Θ(n) で実装せよ。

(load "sicp2.3.3_add2.rkt")
(load "sicp2.3.3_add2_2.63.rkt")
(load "sicp2.3.3_add2_2.64.rkt")
(load "util.rkt")
(define tree->list tree->list-1)

(define (union-set set1 set2)
  (define (union-list set1 set2)
    (cond ((null? set1) set2)
          ((null? set2) set1)
          (else (let ((x1 (car set1)) (x2 (car set2)))
                  (cond ((equal? x1 x2)
                         (cons x1 (union-list (cdr set1) (cdr set2))))
                        ((< x1 x2)
                         (cons x1 (union-list (cdr set1) set2)))
                        ((< x2 x1)
                         (cons x2 (union-list set1 (cdr set2)))))))))
  (list->tree (union-list (tree->list set1) (tree->list set2))))
;> (prn (union-set (list->tree '(1 3 5)) (list->tree '(2 3 4))))
;(3 (1 () (2 () () )(4 () (5 () () ))))

(define (intersection-set set1 set2)
  (define (intersection-list set1 set2)
    (cond ((null? set1) '())
          ((null? set2) '())
          (else (let ((x1 (car set1)) (x2 (car set2)))
                  (cond ((equal? x1 x2)
                         (cons x1 (intersection-list (cdr set1) (cdr set2))))
                        ((< x1 x2)
                         (intersection-list (cdr set1) set2))
                        ((< x2 x1)
                         (intersection-list set1 (cdr set2))))))))
  (list->tree (intersection-list (tree->list set1) (tree->list set2))))
;> (prn (intersection-set (list->tree '(3 5 10)) (list->tree '(1 2 3 4 5 7))))
;(3 () (5 () () ))
